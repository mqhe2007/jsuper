{"version":3,"sources":["../src/platform.ts","../src/no-action-listener.ts","../src/uuid.ts","../src/find-node-from-tree.ts","../src/tree-map.ts","../src/flat-to-tree.ts","../src/event-bus.ts","../src/use-event-bus.ts","../src/position.ts","../src/tree-filter.ts","../src/tree-each.ts"],"sourcesContent":["/**\n * 获取当前运行平台标识\n * @module\n * @returns {string} 返回平台标识：desktop|wechat|ios|android\n */\nfunction platform(): string {\n  const ua: string = navigator.userAgent.toLowerCase();\n  if (ua.indexOf(\"micromessenger\") !== -1) return \"wechat\";\n  if (ua.indexOf(\"iphone\") !== -1 || ua.indexOf(\"ipad\") !== -1) return \"ios\";\n  if (ua.indexOf(\"android\") !== -1) return \"android\";\n  return \"desktop\";\n}\nexport default platform;\n","/**\n * 无动作监听器\n */\nclass NoActionListener {\n  private delayTime: number; // 超时时长，单位秒\n  private timeoutHandler: Function; // 超时后处理函数\n  private timer: number | undefined;\n\n  /**\n   * 构造函数\n   * @param {number} delayTime - 超时时长，单位秒。\n   * @param {Function} timeoutHandler - 超时后处理函数\n   */\n  constructor(delayTime: number, timeoutHandler: Function) {\n    this.delayTime = delayTime;\n    this.timeoutHandler = timeoutHandler;\n    this.timer = undefined;\n  }\n\n  /**\n   * 开始监听\n   */\n  listen(): void {\n    window.addEventListener(\"click\", this.resetTime.bind(this));\n    window.addEventListener(\"keydown\", this.resetTime.bind(this));\n    window.addEventListener(\"mousemove\", this.resetTime.bind(this));\n    window.addEventListener(\"mousewheel\", this.resetTime.bind(this));\n  }\n\n  /**\n   * 清理监听\n   */\n  clearListen(): void {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    window.removeEventListener(\"click\", this.resetTime.bind(this));\n    window.removeEventListener(\"keydown\", this.resetTime.bind(this));\n    window.removeEventListener(\"mousemove\", this.resetTime.bind(this));\n    window.removeEventListener(\"mousewheel\", this.resetTime.bind(this));\n  }\n\n  private resetTime(): void {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    this.timer = setTimeout(() => {\n      this.timeoutHandler();\n      this.clearListen();\n      this.timer = undefined;\n    }, this.delayTime * 1000);\n  }\n}\n\nexport default NoActionListener;\n","/**\n * 生成uuid\n * @module\n * @return {string} uuid字符串\n */\nfunction uuid(): string {\n  let d: number = new Date().getTime();\n  if (window.performance && typeof window.performance.now === \"function\") {\n    d += performance.now();\n  }\n  let template: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxx\";\n  let uuid: string = template.replace(/[xy]/g, function (c: string) {\n    let r: number = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c == \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n  return uuid;\n}\nexport default uuid;\n","interface TreeNode {\n  [key: string]: any;\n  children?: TreeNode[];\n  parent?: TreeNode;\n}\n\n/**\n * 从树结构中找到某个节点\n * @module\n * @param {Array} kv - 需要匹配的键值对\n * @param {Array} treeData - 树结构数据\n * @param {Boolean} returnParent - 是否包含父级节点\n */\nfunction findNodeFromTree(\n  kv: [string, any],\n  treeData: TreeNode[],\n  returnParent: boolean,\n  parentNode?: TreeNode\n): TreeNode | undefined {\n  for (let i = 0; i < treeData.length; i++) {\n    const node = treeData[i];\n    if (node[kv[0]] === kv[1]) {\n      if (returnParent && parentNode) {\n        node.parent = parentNode;\n        return node;\n      } else {\n        return node;\n      }\n    } else {\n      if (node.children && node.children.length > 0) {\n        if (parentNode) {\n          node.parent = parentNode;\n        }\n        const result = findNodeFromTree(kv, node.children, returnParent, node);\n        if (result) {\n          return result;\n        }\n      }\n    }\n  }\n}\n\nexport default findNodeFromTree;\n","/**\n * 对一个树形结构做递归map操作\n * @module\n * @param {Array<any>} nodes - 树结构数组\n * @param {Function} handler - 数据处理程序。\n * @param {string} childrenKey - 子集的key\n * @param {number} depth - 递归的深度值，初始为1\n * @param {Object} parent - map后节点的父对象\n * @returns {Array<any>} - 处理后的树结构数组\n */\nfunction treeMap(\n  nodes: Array<any>,\n  handler: Function,\n  childrenKey: string = \"children\",\n  depth: number = 1,\n  parent?: Object\n): Array<any> {\n  return nodes.map((item) => {\n    let _item = handler(item, depth, parent);\n    if (item[childrenKey] && item[childrenKey].length > 0) {\n      _item.children = treeMap(\n        item[childrenKey],\n        handler,\n        childrenKey,\n        depth + 1,\n        _item\n      );\n    }\n    return _item;\n  });\n}\nexport default treeMap;\n","/**\n * 扁平化结构数据转换成树结构\n * @module\n * @param {Object[]} flatArray - 扁平结构的数组\n * @param {String} key - 用于指定元素的key\n * @param {String} parentkey - 用于指定元素的父元素的key\n * @returns {Object[]} 由树结构组成的数组\n */\n\nfunction flatToTree(flatArray: any[], key: string, parentkey: string): any[] {\n  let result: any[] = [];\n  const buildParent = function (item: any): any {\n    const parentIndex = flatArray.findIndex(\n      (item_: any) => item_[key] === item[parentkey]\n    );\n    if (parentIndex > -1) {\n      const parent = flatArray.splice(parentIndex, 1)[0];\n      parent.children = [];\n      parent.children.push(item);\n      if (!parent[parentkey]) {\n        return parent;\n      } else {\n        return buildParent(parent);\n      }\n    } else {\n      return item;\n    }\n  };\n  flatArray.forEach((item: any) => {\n    if (!item[parentkey]) {\n      result.push(item);\n    } else {\n      result.push(buildParent(item));\n    }\n  });\n  return result;\n}\nexport default flatToTree;\n","/**\n * 事件总线\n */\nclass EventBus {\n  private events: { [key: string]: Set<(payload: any) => void> };\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.events = {};\n  }\n\n  /**\n   * 发射\n   * @param {String} eventName - 事件名称\n   * @param {Any} payload - 事件载荷\n   */\n  emit(eventName: string, payload: any): void {\n    if (!this.events[eventName])\n      return console.warn(\n        `${eventName}事件触发了，但是没有监听者，什么都不会发生。`\n      );\n    for (let func of this.events[eventName].values()) {\n      func(payload);\n    }\n  }\n\n  /**\n   * 监听\n   * @param {String} eventName - 事件名称\n   * @param {Function} handler - 回调处理程序\n   */\n  on(eventName: string, handler: (payload: any) => void): void {\n    if (typeof handler === \"function\") {\n      if (!this.events[eventName]) this.events[eventName] = new Set();\n      this.events[eventName].add(handler);\n    }\n  }\n\n  /**\n   * 取消一个监听程序\n   * @param {String} eventName - 事件名称\n   * @param {Function} handler - 回调处理程序\n   */\n  off(eventName: string, handler: (payload: any) => void): void {\n    if (!handler) return console.warn(`取消监听必须传入已被监听的事件处理函数`);\n    this.events[eventName]?.delete(handler);\n  }\n\n  /**\n   * 清理事件总线\n   */\n  clear(): void {\n    this.events = {};\n  }\n\n  /**\n   * 获取事件清单\n   */\n  getEvents(): { [key: string]: Set<(payload: any) => void> } {\n    return this.events;\n  }\n}\n\nexport default EventBus;\n","/**\n * 事件总线\n */\n/**\n * 监听\n * @param {string} eventName - 事件名称\n * @param {Function} handler - 回调处理程序\n */\nconst on = (eventName: string, handler: Function): void => {\n  if (typeof handler !== \"function\") {\n    return console.error(`${eventName}事件的处理程序不是函数。`);\n  }\n  const eventBusKey = Symbol.for(\"___JSUPER_EVENT_BUS___\");\n  if (!window[eventBusKey].has(eventName))\n    window[eventBusKey].set(eventName, new Set());\n  window[eventBusKey].get(eventName).add(handler);\n};\n\n/**\n * 发射\n * @param {string} eventName - 事件名称\n * @param {any} payload - 事件载荷\n */\nconst emit = (eventName: string, payload: any): void => {\n  const eventBusKey = Symbol.for(\"___JSUPER_EVENT_BUS___\");\n  if (!window[eventBusKey].has(eventName))\n    return console.warn(\n      `${eventName}事件触发了，但是没有监听者，什么都不会发生。`\n    );\n  for (let func of window[eventBusKey].get(eventName).values()) {\n    func(payload);\n  }\n};\n\n/**\n * 取消一个监听程序\n * @param {string} eventName - 事件名称\n * @param {Function} handler - 回调处理程序\n */\nconst off = (eventName: string, handler: Function): void => {\n  if (!handler) return console.error(`取消监听必须传入已被监听的事件处理函数`);\n  const eventBusKey = Symbol.for(\"___JSUPER_EVENT_BUS___\");\n  if (!window[eventBusKey].has(eventName)) return;\n  window[eventBusKey].get(eventName).delete(handler);\n};\n\n/**\n * 清理事件总线\n */\nconst clear = (): void => {\n  const eventBusKey = Symbol.for(\"___JSUPER_EVENT_BUS___\");\n  window[eventBusKey].clear();\n};\n\n/**\n * 获取事件清单\n */\nconst getEvents = (): Map<string, Set<Function>> => {\n  const eventBusKey = Symbol.for(\"___JSUPER_EVENT_BUS___\");\n  return window[eventBusKey];\n};\n\nconst useEvnetBus = (): {\n  emit: (eventName: string, payload: any) => void;\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n  clear: () => void;\n  getEvents: () => Map<string, Set<Function>>;\n} => {\n  const eventBusKey = Symbol.for(\"___JSUPER_EVENT_BUS___\");\n  if (!window[eventBusKey]) {\n    window[eventBusKey] = new Map();\n  }\n  return {\n    emit,\n    on,\n    off,\n    clear,\n    getEvents,\n  };\n};\n\nexport default useEvnetBus;\n","/**\n * 获取元素在页面中的绝对位置\n * @module\n * @returns {Object} 返回距离顶和左的绝对像素值：{top:0, left: 0}\n */\nfunction position(el: HTMLElement): { top: number; left: number } {\n  function getElementLeft(element: HTMLElement): number {\n    let actualLeft = element.offsetLeft;\n    let current: HTMLElement | null = element.offsetParent as HTMLElement;\n\n    while (current !== null) {\n      actualLeft += current.offsetLeft;\n      current = current.offsetParent as HTMLElement;\n    }\n\n    return actualLeft;\n  }\n\n  function getElementTop(element: HTMLElement): number {\n    let actualTop = element.offsetTop;\n    let current: HTMLElement | null = element.offsetParent as HTMLElement;\n\n    while (current !== null) {\n      actualTop += current.offsetTop;\n      current = current.offsetParent as HTMLElement;\n    }\n\n    return actualTop;\n  }\n  return {\n    top: getElementTop(el),\n    left: getElementLeft(el),\n  };\n}\nexport default position;\n","/**\n * 对一个树形结构做filter操作\n * @module\n * @param {Array} nodes - 树结构数组\n * @param {Function} handler - 数据处理程序。\n * @param {Number} depth - 递归的深度值，初始为1\n */\nimport { cloneDeep } from \"lodash-es\";\n\ninterface TreeNode {\n  children?: TreeNode[];\n  [key: string]: any;\n}\n\nfunction treeFilter(\n  nodes: TreeNode[],\n  handler: (node: TreeNode, depth: number) => boolean,\n  depth: number = 1\n): TreeNode[] {\n  return nodes.reduce<TreeNode[]>((acc, item) => {\n    let clonedItem = cloneDeep(item);\n    let children =\n      clonedItem.children && clonedItem.children.length > 0\n        ? treeFilter(clonedItem.children, handler, depth + 1)\n        : [];\n    if (children.length > 0 || handler(clonedItem, depth)) {\n      clonedItem.children = children;\n      acc.push(clonedItem);\n    }\n    return acc;\n  }, []);\n}\n\nexport default treeFilter;\n","/**\n * 对一个树形结构做递归each操作\n * @module\n * @param {Array<any>} list - 树结构数组\n * @param {Function} handler - 数据处理程序。\n * @param {Object} parent - 父级\n */\nfunction treeEach(list: Array<any>, handler: Function, parent: Object) {\n  list.forEach((item: any) => {\n    handler(item, parent);\n    if (item.children?.length) {\n      treeEach(item.children, handler, item);\n    }\n  });\n}\nexport default treeEach;\n"],"mappings":"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","names":["platform","ua","platform_default","NoActionListener","delayTime","timeoutHandler","no_action_listener_default","uuid","d","c","r","uuid_default","findNodeFromTree","kv","treeData","returnParent","parentNode","i","node","result","find_node_from_tree_default","treeMap","nodes","handler","childrenKey","depth","parent","item","_item","tree_map_default","flatToTree","flatArray","key","parentkey","result","buildParent","item","parentIndex","item_","parent","flat_to_tree_default","EventBus","eventName","payload","func","handler","event_bus_default","on","eventName","handler","eventBusKey","emit","payload","func","off","clear","getEvents","useEvnetBus","use_event_bus_default","position","el","getElementLeft","element","actualLeft","current","getElementTop","actualTop","position_default","cloneDeep","treeFilter","nodes","handler","depth","acc","item","clonedItem","children","tree_filter_default","treeEach","list","handler","parent","item","tree_each_default"]}